# -*- coding: utf-8 -*-
"""Symulacja-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gYj1n1RUJ439DJ3-ZV39fsW0u1amPhu4
"""

from random import *

# czas trwania świateł (zielone, czerwone, włączone)
lightTime = [0.2, 0.4, 0]

#cars = []
#buses = []

def carGen(amount):
    #generator aut
    cars = []
    for i in range(0,amount):
        cars.append([round(uniform(1, 4)), round(uniform(0,15), 1)])
    
#def sort():
    #segregowanie aut względem czasu
    for j in range(0, len(cars)):
        for i in range(0, len(cars)-1):
            if cars[i][1]>cars[i+1][1]:
                a = cars[i+1]
                cars[i+1] = cars[i]
                cars[i] = a    
    return(cars)
        
def busGen():
    #generator autobusów
    buses = []
    x = 0.0
    for i in range(0, 10):
        buses.append([round(uniform(1, 80)), x])
        x += 3.0
    return(buses)
        
def smartTraffic(cars, buses):
    #rozładowanie połowy ruchu na bus pas
    for i in range(0, 26, 2):
        buses.append(cars[i])
        cars.pop(i)

#def busPasSort():      
    #segregowanie bus pasa
    for j in range(0, len(buses)):
        for i in range(0, len(buses)-1):
            if buses[i][1]>buses[i+1][1]:
                a = buses[i+1]
                buses[i+1] = buses[i]
                buses[i] = a
    return(cars, buses)

def simulation(cars, buses): 
    time = 0.0
    jamCar = []
    jamBus = []
    peopleArrived = 0
    print(len(cars), len(buses))
    print("samochodów i busów")
    
    # czas trwania świateł (zielone, czerwone, włączone)
    lightTime = [0.2, 0.4, 0]
    
    #generator czasu
    while time<=10.0:

        #tworzenie korku ulicznego
        for car in cars:
            if time in car:
                jamCar.append(car)
        
        for bus in buses:
            if time in bus:
                jamBus.append(bus)
    
        #regulator świateł
    
        # czerwone światło
        if lightTime[2] == 0:
            if time == lightTime[0]:
                lightTime[2] = 1
                lightTime[0] = round(lightTime[0]+0.6, 1)
            
        # zielone światło
        else:
            #rozładowanie korków

            if len(jamCar) != 0:
                peopleArrived += jamCar[0][0]
                jamCar.pop(0)
            if len(jamBus) != 0:
                peopleArrived += jamBus[0][0]
                jamBus.pop(0)
            
            if time == lightTime[1]:
                lightTime[2] = 0
                lightTime[1] = round(lightTime[1]+0.6, 1)
        #print("Liczba aut w korku: ", len(jamCar), "Czas: ", time)
        time=round(time+0.1, 1)
    print("Przejechało: ", peopleArrived, " ludzi")

amount = 50
cars1 = carGen(amount)
buses1 = busGen()
cars2 = cars1
buses2 = buses1
print("Bez buspasa przejechało: ", end = ' ')
simulation(cars1, buses1)
print()

cars2, buses2 = smartTraffic(cars2, buses2)
print("Bez buspasa przejechało ", end = ' ')
simulation(cars2, buses2)